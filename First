#1. Find the most frequent digit in the given no
select the smallest number if there is a tie.
i/o:
1345324
3
Explanation:
in the given number,
3 present 2 times
4 present 2 times
(other numbers present lesser times)
most frequent numbers are 3 and 4,
small among the most frequent is 3.
(another version of the program, select the biggest
number if there is a tie)


def most_frequent_digit(number):
    # Count the occurrences of each digit
    digit_counts = [0] * 10  # There are 10 possible digits (0 to 9)
    # o/p:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


    # Iterate through each digit in the number
    for digit in str(number):
        digit_counts[int(digit)] += 1
    # o/p: [0, 1, 1, 2, 2, 1, 0, 0, 0, 0]

    # Find the maximum count
    max_count = max(digit_counts)
    # o/p: 2

    # Find the smallest number with the maximum count
    smallest_number = float('inf')  # Initialize with positive infinity
    for i in range(10):
        if digit_counts[i] == max_count:
            smallest_number = min(smallest_number, i)
    # o/p:  For i = 0, digit_counts[0] is 0, so it's not considered.
      For i = 1, digit_counts[1] is 1, not equal to max_count so it's not considered.
      For i = 2, digit_counts[2] is 1, not equal to max_count so it's not considered.
      For i = 3, digit_counts[3] is 2 (equal to max_count), so smallest_number is updated to 3.
      For i = 4, digit_counts[4] is 2 (equal to max_count), so smallest_number remains 3.
      For i = 5, digit_counts[5] is 1, so it's not considered.
      For i = 6 to i = 9, none of them have counts equal to max_count, so they are not considered.


    return smallest_number

# Example usage
input_number = 1345324
result = most_frequent_digit(input_number)
print(f"The most frequent digit is {result}")

                                                        (OR)
def most_frequent_digit(number):
    # Count the occurrences of each digit
    digit_counts = [0] * 10  # There are 10 possible digits (0 to 9)

    # Iterate through each digit in the number
    for digit in str(number):
        digit_counts[int(digit)] += 1

    # Find the maximum count
    max_count = max(digit_counts)

    # Find the largest number(s) with the maximum count
    largest_numbers = [i for i in range(10) if digit_counts[i] == max_count]

    # Select the largest number if there is a tie
    result = max(largest_numbers)

    return result

# Example usage
input_number = 1345324
result = most_frequent_digit(input_number)
print(f"The most frequent digit is {result}")

                                                    OR


2. Find how many digits present only once in the given
number
i/o:
124532566
2
Explanation:
1 and 4 present once , so two is the answer


list1 = [1, 2, 3, 4, 5, 1, 2, 3]
dict1 = {}
for i in list1:
    if i in dict1:
        dict1[i] += 1
    else:
        dict1[i] = 1
count=0
for j in dict1.values():
    if j==1:
        count+=1
print(count)
min_count = min(dict1.values())
min_key = min(dict1, key=dict1.get)
print("The minimum count is", min_count)
print("The key of the minimum count is", min_key)
                                     (OR)

3.Palindrome possible: Find whether the given
number can form a palindrome when we
rearrange the digits of a number.
I/O
123123
Yes
1234
No
Explanation:
Consider the number 123123 , it can create
palindrome when rearrange the digits like
123321,
But the number 12345 cannot form
palindrome.


def can_form_palindrome(number):
    # Convert the number to a string for easy iteration over digits
    number_str = str(number)
    
    # Create a dictionary to store the frequency of each digit
    digit_count = {}
    
    # Count the frequency of each digit
    for digit in number_str:
        digit_count[digit] = digit_count.get(digit, 0) + 1
    
    # Check the conditions for forming a palindrome
    odd_count = 0
    for count in digit_count.values():
        if count % 2 != 0:
            odd_count += 1
    
    if (len(number_str) % 2 == 0 and odd_count == 0) or (len(number_str) % 2 == 1 and odd_count == 1):
        return True
    else:
        return False

# Example usage:
input_number1 = 123123
input_number2 = 1234

result1 = can_form_palindrome(input_number1)
result2 = can_form_palindrome(input_number2)

print(f"Can {input_number1} form a palindrome? {result1}")
print(f"Can {input_number2} form a palindrome? {result2}")

                                           (OR)

def can_form_palindrome(number):
    # Convert the number to a string for easy iteration over digits
    number_str = str(number)
    
    # Create a dictionary to store the frequency of each digit
    digit_count = {}
    
    # Count the frequency of each digit
    for digit in number_str:
        digit_count[digit] = digit_count.get(digit, 0) + 1
    
    # Check the conditions for forming a palindrome
    even_count = 0
    for count in digit_count.values():
        if count % 2 == 0:
            even_count += 1
    
    if (len(number_str) % 2 == 0 and even_count >=1) or (len(number_str) % 2 == 1 and even_count == 0):
        return True
    else:
        return False

# Example usage:
input_number1 = 123123
input_number2 = 1234

result1 = can_form_palindrome(input_number1)
result2 = can_form_palindrome(input_number2)

print(f"Can {input_number1} form a palindrome? {result1}")
print(f"Can {input_number2} form a palindrome? {result2}")


4. Get N elements one by one.
The input should be entered in ascending order, if
not stop getting the input.
You have to display number of input given in
order.
I/O 1:
6 ( no of elements)
12
18
20
30
35
50
6 (this is output)
I/O 2:
5 ( no of element)
23
50
45
2( this is output)

def N_element(element):
    count=0
    n=len(element)
    for i in range(n-1):
        if element[i]<element[i+1]:
            count+=1
    return count
element=[24,50,45]
print(N_element(element))

